{"version":3,"sources":["components/MainComponent.js","components/ButtonsComponent.js","redux/store.js","App.js","index.js","redux/calculatorSlice.js"],"names":["Main","expression","useSelector","state","display","exceededLimitCharacters","length","dispatch","useDispatch","reset","clearState","backspace","backSpaceExpression","handleNumber","e","input","target","innerText","includes","setNumberInExpression","addNumberInExpression","handleOperation","operator","replace","addOperatorInExpression","calculate","exp","startWitchOperator","test","endsWithOperator","alert","result","eval","toString","formattedResult","slice","setResult","LimitError","className","id","BtnValues","simb","Btns","props","map","item","clickBehavior","exec","onClick","store","configureStore","reducer","calculatorReducers","App","ReactDOM","render","document","getElementById","initialState","calculatorSlice","createSlice","name","reducers","action","number","payload","actions"],"mappings":"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","file":"static/js/main.db4237d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Btns from \"./ButtonsComponent\";\r\nimport { Col, Container, Label, Row } from \"reactstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  setNumberInExpression,\r\n  addNumberInExpression,\r\n  addOperatorInExpression,\r\n  setResult,\r\n  backSpaceExpression,\r\n  clearState,\r\n} from \"../redux/calculatorSlice\";\r\n\r\nexport const Main = () => {\r\n  const expression = useSelector((state) => state.expression);\r\n  const display = useSelector((state) => state.display);\r\n\r\n  const exceededLimitCharacters = display.length > 15;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const reset = () => {\r\n    dispatch(clearState());\r\n  };\r\n\r\n  const backspace = () => {\r\n    dispatch(backSpaceExpression());\r\n  };\r\n\r\n  const handleNumber = (e) => {\r\n    if (!exceededLimitCharacters) {\r\n      let input = e.target.innerText;\r\n\r\n      const MoreThanOnePointInExpression =\r\n        input === \".\" && display.includes(\".\");\r\n      const MoreThanOneInitialZeroInExpression =\r\n        input === \"0\" && display === \"0\";\r\n\r\n      if (MoreThanOnePointInExpression) return;\r\n      else if (MoreThanOneInitialZeroInExpression) return;\r\n      else if (display === \"0\") {\r\n        dispatch(setNumberInExpression(input));\r\n      } else {\r\n        dispatch(addNumberInExpression(input));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOperation = (e) => {\r\n    if (!exceededLimitCharacters) {\r\n      let operator = e.target.innerText;\r\n      operator = operator.replace(/[÷]/, \"/\");\r\n      operator = operator.replace(/[x]/, \"*\");\r\n\r\n      dispatch(addOperatorInExpression(operator));\r\n    }\r\n  };\r\n\r\n  const calculate = () => {\r\n    if (!exceededLimitCharacters) {\r\n      let exp = expression;\r\n      const startWitchOperator = /^[/*+-]+/.test(exp);\r\n      const endsWithOperator = /[x+‑/]+$/.test(exp);\r\n\r\n      // If 2 or more operators are entered consecutively, the operation performed should be the last operator entered (excluding the negative (-) sign)\r\n      exp = exp.replace(/([-+/*]+)([+/*])/g, \"$2\");\r\n\r\n      if (!endsWithOperator && !startWitchOperator) {\r\n        const result = eval(exp).toString();\r\n        const formattedResult = result.slice(0, 15);\r\n        dispatch(setResult(formattedResult));\r\n      } else {\r\n        alert(\"Invalid expression\");\r\n        reset();\r\n      }\r\n    }\r\n  };\r\n\r\n  const LimitError = () => {\r\n    return <div className=\"error\">\"number of characters exceeded\"</div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <Container className=\"calculator\">\r\n        <Row>\r\n          <Col>\r\n            <div>\r\n              <span>||</span>\r\n            </div>\r\n            <Row className=\"screen\">\r\n              <Label className=\"exp\">\r\n                {display.length > 15 ? \"\" : expression}\r\n              </Label>\r\n              <Label id=\"display\">\r\n                {display.length > 15 ? <LimitError /> : display}\r\n              </Label>\r\n            </Row>\r\n            <Row>\r\n              <Btns\r\n                handleNumber={handleNumber}\r\n                handleOperation={handleOperation}\r\n                calculate={calculate}\r\n                backspace={backspace}\r\n                reset={reset}\r\n              />\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      <div>\r\n        <span className=\"by\">By Bruno Umbelino</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nconst BtnValues = [\r\n  { id: \"clear\", simb: \"AC\" },\r\n  { id: \"backspace\", simb: \"DEL\" },\r\n  { id: \"divide\", simb: \"÷\" },\r\n  { id: \"seven\", simb: \"7\" },\r\n  { id: \"eight\", simb: \"8\" },\r\n  { id: \"nine\", simb: \"9\" },\r\n  { id: \"multiply\", simb: \"x\" },\r\n  { id: \"four\", simb: \"4\" },\r\n  { id: \"five\", simb: \"5\" },\r\n  { id: \"six\", simb: \"6\" },\r\n  { id: \"subtract\", simb: \"-\" },\r\n  { id: \"one\", simb: \"1\" },\r\n  { id: \"two\", simb: \"2\" },\r\n  { id: \"three\", simb: \"3\" },\r\n  { id: \"add\", simb: \"+\" },\r\n  { id: \"zero\", simb: \"0\" },\r\n  { id: \"decimal\", simb: \".\" },\r\n  { id: \"equals\", simb: \"=\" },\r\n];\r\n\r\nconst Btns = (props) => {\r\n\r\n  const Btns = BtnValues.map((item) => {\r\n    let clickBehavior;\r\n\r\n    if (item.id === \"clear\") {\r\n      clickBehavior = props.reset;\r\n    } else if (item.id === \"equals\") {\r\n      clickBehavior = props.calculate;\r\n    } else if (item.id === \"backspace\") {\r\n      clickBehavior = props.backspace;\r\n    } else if (/[-+÷x]/.exec(item.simb)) {\r\n      clickBehavior = props.handleOperation;\r\n    } else {\r\n      clickBehavior = props.handleNumber;\r\n    }\r\n\r\n    return (\r\n      <button\r\n        key={item.id}\r\n        id={item.id}\r\n        onClick={clickBehavior}\r\n        className=\"btn\"\r\n      >\r\n        {item.simb}\r\n      </button>\r\n    );\r\n  });\r\n  return <div className=\"btns\">{Btns}</div>;\r\n};\r\n\r\nexport default Btns;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport calculatorReducers from \"./calculatorSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: calculatorReducers,\r\n});\r\n","import { Provider } from \"react-redux\";\r\nimport { Main } from \"./components/MainComponent\";\r\nimport { store } from \"./redux/store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Main />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.scss'\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  display: \"0\",\r\n  expression: \"\",\r\n};\r\n\r\nconst calculatorSlice = createSlice({\r\n  name: \"calculator\",\r\n  initialState,\r\n  reducers: {\r\n    clearState() {\r\n      return initialState;\r\n    },\r\n    backSpaceExpression(state) {\r\n        state.display = state.display.slice(0, -1)\r\n        state.expression = state.expression.slice(0, -1)\r\n    },\r\n    setNumberInExpression(state, action) {\r\n      const number = action.payload;\r\n      state.display = number;\r\n      state.expression += number;\r\n    },\r\n    addNumberInExpression(state, action) {\r\n      const number = action.payload;\r\n      state.display += number;\r\n      state.expression += number;\r\n    },\r\n    addOperatorInExpression(state, action) {\r\n      const operator = action.payload;\r\n      state.display = operator;\r\n      state.expression += operator;\r\n    },\r\n    setResult(state, action) {\r\n      const result = action.payload;\r\n      state.display = result;\r\n      state.expression = result;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  clearState,\r\n  backSpaceExpression,\r\n  setNumberInExpression,\r\n  addNumberInExpression,\r\n  addOperatorInExpression,\r\n  setResult,\r\n} = calculatorSlice.actions;\r\n\r\nexport default calculatorSlice.reducer;\r\n"],"sourceRoot":""}