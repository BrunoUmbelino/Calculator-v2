[{"C:\\Projects\\Calculator\\src\\index.js":"1","C:\\Projects\\Calculator\\src\\App.js":"2","C:\\Projects\\Calculator\\src\\components\\MainComponent.js":"3","C:\\Projects\\Calculator\\src\\components\\ButtonsComponent.js":"4","D:\\Projects\\Calculator-v2\\src\\index.js":"5","D:\\Projects\\Calculator-v2\\src\\App.js":"6","D:\\Projects\\Calculator-v2\\src\\components\\MainComponent.js":"7","D:\\Projects\\Calculator-v2\\src\\components\\ButtonsComponent.js":"8","D:\\Projects\\Calculator-v2\\src\\redux\\store.js":"9","D:\\Projects\\Calculator-v2\\src\\redux\\calculatorSlice.js":"10"},{"size":235,"mtime":1610933687919,"results":"11","hashOfConfig":"12"},{"size":139,"mtime":1610936475503,"results":"13","hashOfConfig":"12"},{"size":3809,"mtime":1613495491788,"results":"14","hashOfConfig":"12"},{"size":1333,"mtime":1612534027815,"results":"15","hashOfConfig":"12"},{"size":277,"mtime":1613544328742,"results":"16","hashOfConfig":"17"},{"size":260,"mtime":1613540074625,"results":"18","hashOfConfig":"17"},{"size":3294,"mtime":1613538943130,"results":"19","hashOfConfig":"17"},{"size":1374,"mtime":1613538405152,"results":"20","hashOfConfig":"17"},{"size":183,"mtime":1613514987560,"results":"21","hashOfConfig":"17"},{"size":1274,"mtime":1613538387826,"results":"22","hashOfConfig":"17"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cpcczx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xj570x",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"C:\\Projects\\Calculator\\src\\index.js",[],"C:\\Projects\\Calculator\\src\\App.js",[],"C:\\Projects\\Calculator\\src\\components\\MainComponent.js",["45"],"C:\\Projects\\Calculator\\src\\components\\ButtonsComponent.js",[],"D:\\Projects\\Calculator-v2\\src\\index.js",[],"D:\\Projects\\Calculator-v2\\src\\App.js",[],["46","47"],"D:\\Projects\\Calculator-v2\\src\\components\\MainComponent.js",["48"],"import React from \"react\";\r\nimport Btns from \"./ButtonsComponent\";\r\nimport { Container, Label, Row } from \"reactstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  setNumberInExpression,\r\n  addNumberInExpression,\r\n  addOperatorInExpression,\r\n  setResult,\r\n  backSpaceExpression,\r\n  clearState,\r\n} from \"../redux/calculatorSlice\";\r\n\r\nexport const Main = () => {\r\n  const expression = useSelector((state) => state.expression);\r\n  const display = useSelector((state) => state.display);\r\n\r\n  const exceededLimitCharacters = display.length > 15;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const reset = () => {\r\n    dispatch(clearState());\r\n  };\r\n\r\n  const backspace = () => {\r\n    dispatch(backSpaceExpression());\r\n  };\r\n\r\n  const handleNumber = (e) => {\r\n    if (!exceededLimitCharacters) {\r\n      let input = e.target.innerText;\r\n\r\n      const MoreThanOnePointInExpression =\r\n        input === \".\" && display.includes(\".\");\r\n      const MoreThanOneInitialZeroInExpression =\r\n        input === \"0\" && display === \"0\";\r\n\r\n      if (MoreThanOnePointInExpression) return;\r\n      else if (MoreThanOneInitialZeroInExpression) return;\r\n      else if (display === \"0\") {\r\n        dispatch(setNumberInExpression(input));\r\n      } else {\r\n        dispatch(addNumberInExpression(input));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOperation = (e) => {\r\n    if (!exceededLimitCharacters) {\r\n      let operator = e.target.innerText;\r\n      operator = operator.replace(/[÷]/, \"/\");\r\n      operator = operator.replace(/[x]/, \"*\");\r\n\r\n      dispatch(addOperatorInExpression(operator));\r\n    }\r\n  };\r\n\r\n  const calculate = () => {\r\n    if (!exceededLimitCharacters) {\r\n      let exp = expression;\r\n      const startWitchOperator = /^[/*+-]+/.test(exp);\r\n      const endsWithOperator = /[x+‑/]+$/.test(exp);\r\n\r\n      // If 2 or more operators are entered consecutively, the operation performed should be the last operator entered (excluding the negative (-) sign)\r\n      exp = exp.replace(/([-+/*]+)([+/*])/g, \"$2\");\r\n\r\n      if (!endsWithOperator && !startWitchOperator) {\r\n        const result = eval(exp).toString();\r\n        const formattedResult = result.slice(0, 15);\r\n        dispatch(setResult(formattedResult));\r\n      } else {\r\n        alert(\"Invalid expression\");\r\n        reset();\r\n      }\r\n    }\r\n  };\r\n\r\n  const LimitError = () => {\r\n    return <div className=\"error\">\"number of characters exceeded\"</div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div>\r\n        <Container className=\"calculator\">\r\n          <div>\r\n            <span>||</span>\r\n          </div>\r\n          <Row className=\"screen\">\r\n            <Label className=\"exp\">\r\n              {display.length > 15 ? \"\" : expression}\r\n            </Label>\r\n            <Label id=\"display\">\r\n              {display.length > 15 ? <LimitError /> : display}\r\n            </Label>\r\n          </Row>\r\n          <Row>\r\n            <Btns\r\n              handleNumber={handleNumber}\r\n              handleOperation={handleOperation}\r\n              calculate={calculate}\r\n              backspace={backspace}\r\n              reset={reset}\r\n            />\r\n          </Row>\r\n        </Container>\r\n        <div>\r\n          <span className=\"by\">By Bruno Umbelino</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\Projects\\Calculator-v2\\src\\components\\ButtonsComponent.js",[],"D:\\Projects\\Calculator-v2\\src\\redux\\store.js",[],"D:\\Projects\\Calculator-v2\\src\\redux\\calculatorSlice.js",[],{"ruleId":"49","severity":1,"message":"50","line":82,"column":22,"nodeType":"51","messageId":"52","endLine":82,"endColumn":26},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"49","severity":1,"message":"50","line":69,"column":24,"nodeType":"51","messageId":"52","endLine":69,"endColumn":28},"no-eval","eval can be harmful.","CallExpression","unexpected","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-global-assign","no-unsafe-negation"]